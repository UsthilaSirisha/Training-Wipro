a)  Implement a method SliceArray that takes an array, a starting index, and an end index, then returns a new array
 containing the elements from the start to the end index.


public class SliceArray {

  public static int[] sliceArray(int[] arr, int startIndex, int endIndex) {
    int slicedLength = endIndex - startIndex;
    int[] slicedArray = new int[slicedLength];

 
    for (int i = 0; i < slicedLength; i++) {
      slicedArray[i] = arr[startIndex + i];
    }

    return slicedArray;
  }

  public static void main(String[] args) {
    int[] numbers = {1, 2, 3, 4, 5};
    int startIndex = 1;
    int endIndex = 4;

    int[] slicedArray = sliceArray(numbers, startIndex, endIndex);

    System.out.println("Sliced array: ");
    for (int num : slicedArray) {
      System.out.print(num + " ");
    }
  }
}

b) Create a recursive function to find the nth element of a Fibonacci sequence and store the first n elements in an array.

import java.util.Arrays;

public class FibonacciSequence {
    public static void main(String[] args) {
        int n = 10; 
        int[] fibonacciArray = new int[n]; 

      
        generateFibonacci(fibonacciArray, n);
        System.out.println("Fibonacci sequence:");
        System.out.println(Arrays.toString(fibonacciArray));
        int nthElement = fibonacci(n);
        System.out.println("The 8th element of the Fibonacci sequence is: " + nthElement);
    }
    public static void generateFibonacci(int[] array, int n) {
        for (int i = 0; i < n; i++) {
            array[i] = fibonacci(i + 1); 
        }
    }
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

Task 9: String Operations
Write a method that takes two strings, concatenates them, reverses the result, and then extracts the middle substring of the given length. 
Ensure your method handles edge cases, such as an empty string or a substring length larger than the concatenated string.


public class StringOperations {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "World";
        int length = 5;

        String result = extractMiddleSubstring(str1, str2, length);
        System.out.println("Middle substring of length " + length + " from concatenated and reversed strings: " + result);
    }

  
    public static String extractMiddleSubstring(String str1, String str2, int length) {
        
        String concatenated = str1.concat(str2);
        
        StringBuilder reversed = new StringBuilder(concatenated).reverse();
        
        
        int reversedLength = reversed.length();

       
        int startIndex = (reversedLength - length) / 2;

        
        if (reversedLength == 0 || length > reversedLength) {
            return "";
        }

        
        String middleSubstring = reversed.substring(startIndex, startIndex + length);
        return middleSubstring;
    }
}
 




