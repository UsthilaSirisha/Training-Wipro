Task 1: Constructors
Implement a Matrix class that has a constructor which initializes the dimensions of a matrix and a method to fill the matrix with values.
 

public class Matrix {
    private int rows;
    private int columns;
    private int[][] matrix;

    // Constructor to initialize the dimensions of the matrix
    public Matrix(int rows, int columns) {
        this.rows = rows;
        this.columns = columns;
        this.matrix = new int[rows][columns];
    }

    // Method to fill the matrix with values
    public void fillMatrix(int[][] values) {
        if (values.length != rows || values[0].length != columns) {
            System.out.println("Invalid dimensions for input values. Matrix not filled.");
            return;
        }

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                matrix[i][j] = values[i][j];
            }
        }
    }

    // Method to print the matrix
    public void printMatrix() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Create a 3x3 matrix
        Matrix matrixObj = new Matrix(3, 3);

        // Fill the matrix with values
        int[][] values = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        matrixObj.fillMatrix(values);

        // Print the matrix
        matrixObj.printMatrix();
    }
}


Task 2: Inheritance
Create a Shape class with a method area() and extend it with Circle and Rectangle classes overriding the area() method appropriately.
 


// Shape.java
// Parent class Shape
public class Shape {
    public double getArea() {
        return 0.0;
    }
} 
// Rectangle.java
// Child class Rectangle
public class Rectangle extends Shape {
    private double length;
    private double width;
    
    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }
  @Override
    public double getArea() {
        return length * width;
    }
}
// Main.java
// Main class
public class Main {
    public static void main(String[] args) {
    Rectangle rectangle = new Rectangle(3.0, 10.0);
    double area = rectangle.getArea();
    System.out.println("The area of the rectangle is: " + area);
    }
}


Create a package com.math.operations and include classes for various arithmetic operations. Demonstrate how to compile and run these using the classpath.




// Addition.java
package com.math.operations;

public class Addition {
    public static int add(int a, int b) {
        return a + b;
    }
}

// Subtraction.java
package com.math.operations;

public class Subtraction {
    public static int subtract(int a, int b) {
        return a - b;
    }
}

// Multiplication.java
package com.math.operations;

public class Multiplication {
    public static int multiply(int a, int b) {
        return a * b;
    }
}

// Division.java
package com.math.operations;

public class Division {
    public static int divide(int a, int b) {
        if (b == 0) {
            throw new ArithmeticException("Cannot divide by zero");
        }
        return a / b;
    }
}

compilation:
javac -d . com/math/operations/*.java


Run:
java -cp . com.math.operations.Addition
java -cp . com.math.operations.Subtraction
java -cp . com.math.operations.Multiplication
java -cp . com.math.operations.Division

