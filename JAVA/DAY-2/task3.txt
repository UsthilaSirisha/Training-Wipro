Task 4: Basic Exception Handling
Write a program that attempts to divide by zero, catches the ArithmeticException, and provides a custom error message.

public class DivideByZero {

  public static void main(String[] args) {
    int numerator = 10;
    int denominator = 0;

    try {
      // Attempt division by zero
      int result = numerator / denominator;
      System.out.println("Result: " + result); // This line won't be executed
    } catch (ArithmeticException e) {
      System.out.println("Error: Division by zero is not allowed!");
      System.out.println("Exception message: " + e.getMessage()); // Optional: Print the exception message
    }
  }
}
 Error message:
Error: Division by zero is not allowed!
Exception message: / by zero

1) Create a CustomStack class with operations Push, Pop, Peek, and IsEmpty. Demonstrate its LIFO behavior by pushing integers onto the stack, 
then popping and displaying them until the stack is empty.



import java.util.ArrayList;
import java.util.EmptyStackException;

public class CustomStack {
    private ArrayList<Integer> stack;

    // Constructor to initialize the stack
    public CustomStack() {
        stack = new ArrayList<>();
    }

    // Push operation to add an element to the top of the stack
    public void push(int value) {
        stack.add(value);
    }

    // Pop operation to remove and return the top element of the stack
    public int pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.remove(stack.size() - 1);
    }

    // Peek operation to return the top element of the stack without removing it
    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        CustomStack stack = new CustomStack();

        // Push integers onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);

        // Pop and display integers until the stack is empty (LIFO behavior)
        System.out.println("Popping elements from the stack:");
        while (!stack.isEmpty()) {
            System.out.println(stack.pop());
        }
    }
}


2) Develop a CustomQueue class with methods for Enqueue, Dequeue, Peek, and IsEmpty. Show how your queue can handle different data types by
 enqueuing strings and integers, then dequeuing and displaying them to confirm FIFO order.
import java.util.LinkedList;
import java.util.Queue;
import java.util.NoSuchElementException;

public class CustomQueue<T> {
    private Queue<T> queue;

    // Constructor to initialize the queue
    public CustomQueue() {
        queue = new LinkedList<>();
    }

    // Enqueue operation to add an element to the end of the queue
    public void enqueue(T element) {
        queue.offer(element);
    }

    // Dequeue operation to remove and return the front element of the queue
    public T dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return queue.poll();
    }

    // Peek operation to return the front element of the queue without removing it
    public T peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return queue.peek();
    }

  
    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public static void main(String[] args) {
        CustomQueue<Object> queue = new CustomQueue<>();

        
        queue.enqueue("First");
        queue.enqueue(10);
        queue.enqueue("Second");
        queue.enqueue(20);

      
        System.out.println("Dequeuing elements from the queue:");
        while (!queue.isEmpty()) {
            System.out.println(queue.dequeue());
        }
    }
}



