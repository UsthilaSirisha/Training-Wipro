Task 5: Two-Sum Problem
a) Given an array of integers, write a program that finds if there are two numbers that add up to a specific target. 
You may assume that each input would have exactly one solution, and you may not use the same element twice. Optimize the
 solution for time complexity.
 

public class TwoSum {

  public static int[] twoSum(int[] nums, int target) {
    for (int i = 0; i < nums.length; i++) {
      for (int j = i + 1; j < nums.length; j++) {
        if (nums[i] + nums[j] == target) {
          return new int[]{i, j};
        }
      }
    }
    return new int[0];
  }

  public static void main(String[] args) {
    int[] nums = {2, 7, 11, 15};
    int target = 9;
    int[] result = twoSum(nums, target);
    System.out.println("Indices of the two numbers that add up to " + target + " are: [" + result[0] + ", " + result[1] + "]");
  }
}


Task 6: Understanding Functions through Arrays
a) Write a recursive function named SumArray that calculates and returns the sum of elements in an array, demonstarte with example.
 


public class SumArray {

  public static int sumArray(int[] arr, int index) {
  
    if (index == arr.length) {
      return 0;
    }
    return arr[index] + sumArray(arr, index + 1);
  }

  public static void main(String[] args) {
    int[] numbers = {2, 5, 3, 1};
    int sum = sumArray(numbers, 0);
    System.out.println("The sum of the elements in the array is: " + sum);
  }
}

Task:7
a) Implement a function called BruteForceSort that sorts an array using the brute force approach.
 Use this function to sort an array created with InitializeArray.



import java.util.Arrays;

public class BruteForceSort {
    public static void main(String[] args) {
        int[] array = InitializeArray(); 
        System.out.println("Original Array: " + Arrays.toString(array));

        BruteForceSort(array); 
        System.out.println("Sorted Array: " + Arrays.toString(array));
    }

    
    public static int[] InitializeArray() {
        int[] array = {5, 2, 9, 1, 7}; 
        return array;
    }
    public static void BruteForceSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // Swap array[j] and array[j+1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}

b) Write a function named PerformLinearSearch that searches for a specific element in an array and returns 
the index of the element if found or -1 if not found.


public class LinearSearch {
    public static void main(String[] args) {
        int[] array = {5, 2, 9, 1, 7}; 
        int target = 9;
        
        int index = PerformLinearSearch(array, target);
        if (index != -1) {
            System.out.println("Element found at index: " + index);
        } else {
            System.out.println("Element not found in the array.");
        }
    }
    public static int PerformLinearSearch(int[] array, int target) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                return i; 
            }
        }
        return -1;
    }
}


